// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#ifndef PROTOBUF_chat_2eproto__INCLUDED
#define PROTOBUF_chat_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace tencent {
namespace mars {
namespace sample {
namespace chat {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_chat_2eproto();
void protobuf_InitDefaults_chat_2eproto();
void protobuf_AssignDesc_chat_2eproto();
void protobuf_ShutdownFile_chat_2eproto();

class SendMessageRequest;
class SendMessageResponse;

enum SendMessageResponse_Error {
  SendMessageResponse_Error_ERR_OK = 0,
  SendMessageResponse_Error_ERR_SYS = -1
};
bool SendMessageResponse_Error_IsValid(int value);
const SendMessageResponse_Error SendMessageResponse_Error_Error_MIN = SendMessageResponse_Error_ERR_SYS;
const SendMessageResponse_Error SendMessageResponse_Error_Error_MAX = SendMessageResponse_Error_ERR_OK;
const int SendMessageResponse_Error_Error_ARRAYSIZE = SendMessageResponse_Error_Error_MAX + 1;

const ::google::protobuf::EnumDescriptor* SendMessageResponse_Error_descriptor();
inline const ::std::string& SendMessageResponse_Error_Name(SendMessageResponse_Error value) {
  return ::google::protobuf::internal::NameOfEnum(
    SendMessageResponse_Error_descriptor(), value);
}
inline bool SendMessageResponse_Error_Parse(
    const ::std::string& name, SendMessageResponse_Error* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SendMessageResponse_Error>(
    SendMessageResponse_Error_descriptor(), name, value);
}
// ===================================================================

class SendMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.tencent.mars.sample.chat.proto.SendMessageRequest) */ {
 public:
  SendMessageRequest();
  virtual ~SendMessageRequest();

  SendMessageRequest(const SendMessageRequest& from);

  inline SendMessageRequest& operator=(const SendMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageRequest& default_instance();

  static const SendMessageRequest* internal_default_instance();

  void Swap(SendMessageRequest* other);

  // implements Message ----------------------------------------------

  inline SendMessageRequest* New() const { return New(NULL); }

  SendMessageRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMessageRequest& from);
  void MergeFrom(const SendMessageRequest& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendMessageRequest* other);
  void UnsafeMergeFrom(const SendMessageRequest& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string access_token = 1;
  bool has_access_token() const;
  void clear_access_token();
  static const int kAccessTokenFieldNumber = 1;
  const ::std::string& access_token() const;
  void set_access_token(const ::std::string& value);
  void set_access_token(const char* value);
  void set_access_token(const char* value, size_t size);
  ::std::string* mutable_access_token();
  ::std::string* release_access_token();
  void set_allocated_access_token(::std::string* access_token);

  // required string from = 2;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 2;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // required string to = 3;
  bool has_to() const;
  void clear_to();
  static const int kToFieldNumber = 3;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // required string text = 4;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 4;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // required string topic = 5;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 5;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:com.tencent.mars.sample.chat.proto.SendMessageRequest)
 private:
  inline void set_has_access_token();
  inline void clear_has_access_token();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_topic();
  inline void clear_has_topic();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr access_token_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  friend void  protobuf_InitDefaults_chat_2eproto_impl();
  friend void  protobuf_AddDesc_chat_2eproto_impl();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SendMessageRequest> SendMessageRequest_default_instance_;

// -------------------------------------------------------------------

class SendMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.tencent.mars.sample.chat.proto.SendMessageResponse) */ {
 public:
  SendMessageResponse();
  virtual ~SendMessageResponse();

  SendMessageResponse(const SendMessageResponse& from);

  inline SendMessageResponse& operator=(const SendMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SendMessageResponse& default_instance();

  static const SendMessageResponse* internal_default_instance();

  void Swap(SendMessageResponse* other);

  // implements Message ----------------------------------------------

  inline SendMessageResponse* New() const { return New(NULL); }

  SendMessageResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SendMessageResponse& from);
  void MergeFrom(const SendMessageResponse& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendMessageResponse* other);
  void UnsafeMergeFrom(const SendMessageResponse& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SendMessageResponse_Error Error;
  static const Error ERR_OK =
    SendMessageResponse_Error_ERR_OK;
  static const Error ERR_SYS =
    SendMessageResponse_Error_ERR_SYS;
  static inline bool Error_IsValid(int value) {
    return SendMessageResponse_Error_IsValid(value);
  }
  static const Error Error_MIN =
    SendMessageResponse_Error_Error_MIN;
  static const Error Error_MAX =
    SendMessageResponse_Error_Error_MAX;
  static const int Error_ARRAYSIZE =
    SendMessageResponse_Error_Error_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Error_descriptor() {
    return SendMessageResponse_Error_descriptor();
  }
  static inline const ::std::string& Error_Name(Error value) {
    return SendMessageResponse_Error_Name(value);
  }
  static inline bool Error_Parse(const ::std::string& name,
      Error* value) {
    return SendMessageResponse_Error_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 err_code = 1;
  bool has_err_code() const;
  void clear_err_code();
  static const int kErrCodeFieldNumber = 1;
  ::google::protobuf::int32 err_code() const;
  void set_err_code(::google::protobuf::int32 value);

  // required string err_msg = 2;
  bool has_err_msg() const;
  void clear_err_msg();
  static const int kErrMsgFieldNumber = 2;
  const ::std::string& err_msg() const;
  void set_err_msg(const ::std::string& value);
  void set_err_msg(const char* value);
  void set_err_msg(const char* value, size_t size);
  ::std::string* mutable_err_msg();
  ::std::string* release_err_msg();
  void set_allocated_err_msg(::std::string* err_msg);

  // required string from = 3;
  bool has_from() const;
  void clear_from();
  static const int kFromFieldNumber = 3;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // required string text = 4;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 4;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // required string topic = 5;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 5;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:com.tencent.mars.sample.chat.proto.SendMessageResponse)
 private:
  inline void set_has_err_code();
  inline void clear_has_err_code();
  inline void set_has_err_msg();
  inline void clear_has_err_msg();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_topic();
  inline void clear_has_topic();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr err_msg_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::int32 err_code_;
  friend void  protobuf_InitDefaults_chat_2eproto_impl();
  friend void  protobuf_AddDesc_chat_2eproto_impl();
  friend void protobuf_AssignDesc_chat_2eproto();
  friend void protobuf_ShutdownFile_chat_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<SendMessageResponse> SendMessageResponse_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// SendMessageRequest

// required string access_token = 1;
inline bool SendMessageRequest::has_access_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMessageRequest::set_has_access_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMessageRequest::clear_has_access_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMessageRequest::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_access_token();
}
inline const ::std::string& SendMessageRequest::access_token() const {
  // @@protoc_insertion_point(field_get:com.tencent.mars.sample.chat.proto.SendMessageRequest.access_token)
  return access_token_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_access_token(const ::std::string& value) {
  set_has_access_token();
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.tencent.mars.sample.chat.proto.SendMessageRequest.access_token)
}
inline void SendMessageRequest::set_access_token(const char* value) {
  set_has_access_token();
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.tencent.mars.sample.chat.proto.SendMessageRequest.access_token)
}
inline void SendMessageRequest::set_access_token(const char* value, size_t size) {
  set_has_access_token();
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.tencent.mars.sample.chat.proto.SendMessageRequest.access_token)
}
inline ::std::string* SendMessageRequest::mutable_access_token() {
  set_has_access_token();
  // @@protoc_insertion_point(field_mutable:com.tencent.mars.sample.chat.proto.SendMessageRequest.access_token)
  return access_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageRequest::release_access_token() {
  // @@protoc_insertion_point(field_release:com.tencent.mars.sample.chat.proto.SendMessageRequest.access_token)
  clear_has_access_token();
  return access_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_allocated_access_token(::std::string* access_token) {
  if (access_token != NULL) {
    set_has_access_token();
  } else {
    clear_has_access_token();
  }
  access_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:com.tencent.mars.sample.chat.proto.SendMessageRequest.access_token)
}

// required string from = 2;
inline bool SendMessageRequest::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMessageRequest::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMessageRequest::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMessageRequest::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
inline const ::std::string& SendMessageRequest::from() const {
  // @@protoc_insertion_point(field_get:com.tencent.mars.sample.chat.proto.SendMessageRequest.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.tencent.mars.sample.chat.proto.SendMessageRequest.from)
}
inline void SendMessageRequest::set_from(const char* value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.tencent.mars.sample.chat.proto.SendMessageRequest.from)
}
inline void SendMessageRequest::set_from(const char* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.tencent.mars.sample.chat.proto.SendMessageRequest.from)
}
inline ::std::string* SendMessageRequest::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:com.tencent.mars.sample.chat.proto.SendMessageRequest.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageRequest::release_from() {
  // @@protoc_insertion_point(field_release:com.tencent.mars.sample.chat.proto.SendMessageRequest.from)
  clear_has_from();
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:com.tencent.mars.sample.chat.proto.SendMessageRequest.from)
}

// required string to = 3;
inline bool SendMessageRequest::has_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendMessageRequest::set_has_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendMessageRequest::clear_has_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendMessageRequest::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_to();
}
inline const ::std::string& SendMessageRequest::to() const {
  // @@protoc_insertion_point(field_get:com.tencent.mars.sample.chat.proto.SendMessageRequest.to)
  return to_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_to(const ::std::string& value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.tencent.mars.sample.chat.proto.SendMessageRequest.to)
}
inline void SendMessageRequest::set_to(const char* value) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.tencent.mars.sample.chat.proto.SendMessageRequest.to)
}
inline void SendMessageRequest::set_to(const char* value, size_t size) {
  set_has_to();
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.tencent.mars.sample.chat.proto.SendMessageRequest.to)
}
inline ::std::string* SendMessageRequest::mutable_to() {
  set_has_to();
  // @@protoc_insertion_point(field_mutable:com.tencent.mars.sample.chat.proto.SendMessageRequest.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageRequest::release_to() {
  // @@protoc_insertion_point(field_release:com.tencent.mars.sample.chat.proto.SendMessageRequest.to)
  clear_has_to();
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    set_has_to();
  } else {
    clear_has_to();
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:com.tencent.mars.sample.chat.proto.SendMessageRequest.to)
}

// required string text = 4;
inline bool SendMessageRequest::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendMessageRequest::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendMessageRequest::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendMessageRequest::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& SendMessageRequest::text() const {
  // @@protoc_insertion_point(field_get:com.tencent.mars.sample.chat.proto.SendMessageRequest.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.tencent.mars.sample.chat.proto.SendMessageRequest.text)
}
inline void SendMessageRequest::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.tencent.mars.sample.chat.proto.SendMessageRequest.text)
}
inline void SendMessageRequest::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.tencent.mars.sample.chat.proto.SendMessageRequest.text)
}
inline ::std::string* SendMessageRequest::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:com.tencent.mars.sample.chat.proto.SendMessageRequest.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageRequest::release_text() {
  // @@protoc_insertion_point(field_release:com.tencent.mars.sample.chat.proto.SendMessageRequest.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:com.tencent.mars.sample.chat.proto.SendMessageRequest.text)
}

// required string topic = 5;
inline bool SendMessageRequest::has_topic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendMessageRequest::set_has_topic() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendMessageRequest::clear_has_topic() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendMessageRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
inline const ::std::string& SendMessageRequest::topic() const {
  // @@protoc_insertion_point(field_get:com.tencent.mars.sample.chat.proto.SendMessageRequest.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.tencent.mars.sample.chat.proto.SendMessageRequest.topic)
}
inline void SendMessageRequest::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.tencent.mars.sample.chat.proto.SendMessageRequest.topic)
}
inline void SendMessageRequest::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.tencent.mars.sample.chat.proto.SendMessageRequest.topic)
}
inline ::std::string* SendMessageRequest::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:com.tencent.mars.sample.chat.proto.SendMessageRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageRequest::release_topic() {
  // @@protoc_insertion_point(field_release:com.tencent.mars.sample.chat.proto.SendMessageRequest.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:com.tencent.mars.sample.chat.proto.SendMessageRequest.topic)
}

inline const SendMessageRequest* SendMessageRequest::internal_default_instance() {
  return &SendMessageRequest_default_instance_.get();
}
// -------------------------------------------------------------------

// SendMessageResponse

// required int32 err_code = 1;
inline bool SendMessageResponse::has_err_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendMessageResponse::set_has_err_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendMessageResponse::clear_has_err_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendMessageResponse::clear_err_code() {
  err_code_ = 0;
  clear_has_err_code();
}
inline ::google::protobuf::int32 SendMessageResponse::err_code() const {
  // @@protoc_insertion_point(field_get:com.tencent.mars.sample.chat.proto.SendMessageResponse.err_code)
  return err_code_;
}
inline void SendMessageResponse::set_err_code(::google::protobuf::int32 value) {
  set_has_err_code();
  err_code_ = value;
  // @@protoc_insertion_point(field_set:com.tencent.mars.sample.chat.proto.SendMessageResponse.err_code)
}

// required string err_msg = 2;
inline bool SendMessageResponse::has_err_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendMessageResponse::set_has_err_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendMessageResponse::clear_has_err_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendMessageResponse::clear_err_msg() {
  err_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_err_msg();
}
inline const ::std::string& SendMessageResponse::err_msg() const {
  // @@protoc_insertion_point(field_get:com.tencent.mars.sample.chat.proto.SendMessageResponse.err_msg)
  return err_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageResponse::set_err_msg(const ::std::string& value) {
  set_has_err_msg();
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.tencent.mars.sample.chat.proto.SendMessageResponse.err_msg)
}
inline void SendMessageResponse::set_err_msg(const char* value) {
  set_has_err_msg();
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.tencent.mars.sample.chat.proto.SendMessageResponse.err_msg)
}
inline void SendMessageResponse::set_err_msg(const char* value, size_t size) {
  set_has_err_msg();
  err_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.tencent.mars.sample.chat.proto.SendMessageResponse.err_msg)
}
inline ::std::string* SendMessageResponse::mutable_err_msg() {
  set_has_err_msg();
  // @@protoc_insertion_point(field_mutable:com.tencent.mars.sample.chat.proto.SendMessageResponse.err_msg)
  return err_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageResponse::release_err_msg() {
  // @@protoc_insertion_point(field_release:com.tencent.mars.sample.chat.proto.SendMessageResponse.err_msg)
  clear_has_err_msg();
  return err_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageResponse::set_allocated_err_msg(::std::string* err_msg) {
  if (err_msg != NULL) {
    set_has_err_msg();
  } else {
    clear_has_err_msg();
  }
  err_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), err_msg);
  // @@protoc_insertion_point(field_set_allocated:com.tencent.mars.sample.chat.proto.SendMessageResponse.err_msg)
}

// required string from = 3;
inline bool SendMessageResponse::has_from() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendMessageResponse::set_has_from() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendMessageResponse::clear_has_from() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendMessageResponse::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_from();
}
inline const ::std::string& SendMessageResponse::from() const {
  // @@protoc_insertion_point(field_get:com.tencent.mars.sample.chat.proto.SendMessageResponse.from)
  return from_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageResponse::set_from(const ::std::string& value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.tencent.mars.sample.chat.proto.SendMessageResponse.from)
}
inline void SendMessageResponse::set_from(const char* value) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.tencent.mars.sample.chat.proto.SendMessageResponse.from)
}
inline void SendMessageResponse::set_from(const char* value, size_t size) {
  set_has_from();
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.tencent.mars.sample.chat.proto.SendMessageResponse.from)
}
inline ::std::string* SendMessageResponse::mutable_from() {
  set_has_from();
  // @@protoc_insertion_point(field_mutable:com.tencent.mars.sample.chat.proto.SendMessageResponse.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageResponse::release_from() {
  // @@protoc_insertion_point(field_release:com.tencent.mars.sample.chat.proto.SendMessageResponse.from)
  clear_has_from();
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageResponse::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    set_has_from();
  } else {
    clear_has_from();
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:com.tencent.mars.sample.chat.proto.SendMessageResponse.from)
}

// required string text = 4;
inline bool SendMessageResponse::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendMessageResponse::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendMessageResponse::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendMessageResponse::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& SendMessageResponse::text() const {
  // @@protoc_insertion_point(field_get:com.tencent.mars.sample.chat.proto.SendMessageResponse.text)
  return text_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageResponse::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.tencent.mars.sample.chat.proto.SendMessageResponse.text)
}
inline void SendMessageResponse::set_text(const char* value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.tencent.mars.sample.chat.proto.SendMessageResponse.text)
}
inline void SendMessageResponse::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.tencent.mars.sample.chat.proto.SendMessageResponse.text)
}
inline ::std::string* SendMessageResponse::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:com.tencent.mars.sample.chat.proto.SendMessageResponse.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageResponse::release_text() {
  // @@protoc_insertion_point(field_release:com.tencent.mars.sample.chat.proto.SendMessageResponse.text)
  clear_has_text();
  return text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageResponse::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:com.tencent.mars.sample.chat.proto.SendMessageResponse.text)
}

// required string topic = 5;
inline bool SendMessageResponse::has_topic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendMessageResponse::set_has_topic() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendMessageResponse::clear_has_topic() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendMessageResponse::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
inline const ::std::string& SendMessageResponse::topic() const {
  // @@protoc_insertion_point(field_get:com.tencent.mars.sample.chat.proto.SendMessageResponse.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageResponse::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.tencent.mars.sample.chat.proto.SendMessageResponse.topic)
}
inline void SendMessageResponse::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.tencent.mars.sample.chat.proto.SendMessageResponse.topic)
}
inline void SendMessageResponse::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.tencent.mars.sample.chat.proto.SendMessageResponse.topic)
}
inline ::std::string* SendMessageResponse::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:com.tencent.mars.sample.chat.proto.SendMessageResponse.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SendMessageResponse::release_topic() {
  // @@protoc_insertion_point(field_release:com.tencent.mars.sample.chat.proto.SendMessageResponse.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SendMessageResponse::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:com.tencent.mars.sample.chat.proto.SendMessageResponse.topic)
}

inline const SendMessageResponse* SendMessageResponse::internal_default_instance() {
  return &SendMessageResponse_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace chat
}  // namespace sample
}  // namespace mars
}  // namespace tencent
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::tencent::mars::sample::chat::proto::SendMessageResponse_Error> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::tencent::mars::sample::chat::proto::SendMessageResponse_Error>() {
  return ::com::tencent::mars::sample::chat::proto::SendMessageResponse_Error_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_chat_2eproto__INCLUDED
